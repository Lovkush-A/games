import copyimport timeimport random# define global variables# create list of lineslines_horiz = [[ (i,j) for j in range(3)] for i in range(3)]lines_vert  = [[(i,j) for i in range(3)] for j in range(3)]lines_diag = [[(i,i) for i in range(3)],[(i,2-i) for i in range(3)]]lines = lines_horiz + lines_vert+lines_diagdef legal_moves(board):    legal_moves = []        for x in range(3):        for y in range(3):            if board[x][y] == ' ':                legal_moves.append([x,y])                    return legal_movesdef update_board(board, move):    new_board = copy.deepcopy(board)    x,y = move    new_board[x][y] = current_player(board)    return new_boarddef current_player(board):    if len(legal_moves(board)) %2 == 1:        return 'O'    else:        return 'X'def check_winner(board):    """    checks if there is a winner or if there is a tie.    if O has won, return O    if X has won, return X    if tie, return Nobody    else game is not over so return None    """    for line in lines:        if all([board[x][y] == 'O' for x,y in line]):            return 'O'        elif all([board[x][y] == 'X' for x,y in line]):            return 'X'    if all(board[x][y] != ' ' for x in range(3) for y in range(3)):        return 'Nobody'    return Nonedef score(winner):    """    if the game is over, evaluate score of the board    1 means O won, -1 means X won, 0 means nobody won.    """    if winner == 'Nobody':        return 0    elif winner == 'O':        return 1    elif winner == 'X':        return -1def evaluate(board):    """    using min max, determine value of current board position    1 means O wins with best play    -1 means X wins with best play    0 means tie with best play    """    winner = check_winner(board)        if winner is not None:        return score(winner)        player = current_player(board)    moves = legal_moves(board)    new_positions = [update_board(board, move) for move in moves]        if player == 'O':        best_evaluation = -1        for move in moves:            current_evaluation = evaluate(update_board(board, move))            if current_evaluation > best_evaluation:                best_evaluation = current_evaluation        return (best_evaluation)    elif player == 'X':        best_evaluation = 1        for move in moves:            current_evaluation = evaluate(update_board(board, move))            if current_evaluation < best_evaluation:                best_evaluation = current_evaluation        return (best_evaluation)                def best_move(board):    player = current_player(board)    moves = legal_moves(board)    random.shuffle(moves)    evaluation = evaluate(board)        for move in moves:        if evaluate(update_board(board, move)) == evaluation:            return move    def print_board(board):    for row in range(5):        for col in range(5):            if row % 2 == 1:                print("-", end = "")            elif col % 2 == 1:                print("|", end = "")            else:                x = int(row/2)                y = int(col/2)                print(board[x][y], end = "")        print("")def ask_for_move(board):    print_board(board)    print(f"Player {current_player(board)}, make your move")    legal = False    while legal == False:        move = input("Your move: ").split(",")        move = [int(i) for i in move]        legal = move in legal_moves(board)    return movedef play_game():    board = [[' ']*3] + [[' ']*3] + [[' ']*3]    winner = None    ai = int(input("Is AI starting player? Enter 0 or 1: "))        while (winner == None):        if ai == False:            move = ask_for_move(board)            ai = True        else:            print("AI determining best move...")            time.sleep(1)            move = best_move(board)            ai = False        board = update_board(board, move)        winner = check_winner(board)        print_board(board)    print(f"Winner is {winner}")    play_game()